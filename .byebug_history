quit
help
finish
help
?
food
c
food
c
render food
food
c
@foods
food
c
follow_redirect
assert_redirect
c
get "/foods/search?q=Food"
get "/foods/search"
get food_search_path + "?q=Food"
get food_search_path
get "/foods/search", {q: "Food", ndbno: "wtf"}
get "/foods/search", {q: "Food"}
get "/foods/search", q: "Food"
get "0.0.0.0:3000/foods/search", q: "Food"
get "foods/search", q: "Food"
food_search_path
get food_search_path, q:"Food"
c
get food_search_path, q: "Food"
c
get food_search_path, q: "Food"
c
get food_find_path
get food_find_path, "q" => "Food"
get food_find_path, "q": "Food"
get food_find_path, q: "Food"
food_find_path
c
measurement_boxes[0]['value']
c
measurement_box[0]['data-measurement-id']
measurement_box = css_select ".measurement-box"
measurement_box = css_select ".measurement-box:first-child"
measurement_box = css_select ".measurement-box:first-child
c
css_select ".measurement-box"
measurement_boxes[0]['value']
c
food_inputs[1].text
food_inputs[1]
food_inputs[0]
c
assert_select('.edit_food_entry')
next
h
post food_entries_path, food_entry: @food_entry
food_entries_path
food_entries_pat
@food_entry
c
@food
c
results.size
c
(page - 1) * per_page
page - 1 * per_page
page - 1
page
c
results
c
@food_entry.errors
@food_entry.error
c
measurement.id.to_s
measurement.id
measurement
c
measurement.second
measurement.first
measurement
c
measurements
c
@result["report"]["food"]["nutrients"][1]
@result["report"]["food"]["nutrients"]
@result["report"]["food"]["name"]
@result["report"]["food"]["ndbno"]
@result["report"]["food"]
@result["report"]
c
params[:ndbno]
id
c
params[:ndbno]
id
url
c
response[0].present?
response[0].present
response[0]["error"]
response[0].error
response
response[:error]
response[:list]
response.list
response.try(:error)
response.try(:list)
response.list
response.first["error"]
response.first.error
response.first.try("error")
response.first.try(:error)
response.first
response.first.try(:error)
response.try(:error)
response.try(:list)
response.try(:nil)
response["link"].try
response["link"].nil?
response["link"]
response.has_key?("error")
response
c
response
c
response["list"]
response["list"].exists
response.size
response["list"].present?
response
c
response
response.first
response = searchUSDA(params[:q])
c
responsec
response = searchUSDA(params[:q])
c
response
c
response
c
response
c
response
c
response.first
response
c
query
c
query
c
full_hash["list"]["item"].size
full_hash["list"]["item"]
full_hash["list"]
c
full_hash["list"].size
full_hash["list"]
full_hash.list.size
full_hash[:list]
full_hash[:list].size
full_hash
c
params
c
@food.measurements.size
@food.measurements
@food
c
@newmeasurement
c
@food.measurements
@food.measurements.destroy_all
@food.measurements.empty
@food.measurements
@food.measurements[0].destroy
@food.measurements
c
measurement
params[:measurement]['1']
c
params[:measurement]['1']
params[:measurement][1]
params[:measurement].1
params[:measurement]
measurement
c
food_update_error
params
@measurements
c
@food.measurements
@measurement.save
@measurement = @food.measurements.new(amount: 1, unit: 'cookie', calories: 1, carbs: 1, fat: 1, protein: 1)
@food.measurements
@food.save
@food
@food = current_user.foods.new(name: 'test')
@measurements
c
@measurements[1].destroy
@measurements[1]
@measurements[2]
@measurements
c
@measurements
@food.measurements
c
@measurement
c
params[:measurement]['0']
params[:measurement][:0]
params[:measurement][0]
params[:measurement]
@measurement
c
params.require({ measurement: 0 }).permit(:amount, :calories)
params.require(:measurement[0]).permit(:amount, :calories)
params.require(:measurement[0]).permit(:amount, :calories])
params.require(:measurement).permit({'0' => [:amount, :calories]})
params.require(:measurement).permit({'0' => :amount, :calories})
params.require(:measurement).permit({'0' => :amount})
params.require(:measurement).permit({'0': :amount})
params.require(:measurement).permit({a: :amount})
params.require(:measurement).permit({0: :amount})
params.require(:measurement).permit(0: [:amount])
params.require(:measurement).permit(0 => {:amount})
params.require(:measurement).permit(0: :amount)
params.require(:measurement).permit(0 => [:amount])
params.require(:measurement).permit({:amount})
params.require(:measurement).permit(:amount)
params.require(:measurement).permit([:amount])
params.require(:measurement)
params.require(measurement: [0])
params.require(measurement: {0})
params.require(measurement: 0)
params.require(:measurement => 0)
params.require(:measurement => [0])
params.require(:measurement)
params.require(:measurement)c
c
params.require(:measurement)c
params.require(:measurement)
c
params
 c
c
params.require(:measurementc).permit
c
params
c
params.permit(measurement: [:amount, :unit, :calories, :fat, :carbs, :protein])
