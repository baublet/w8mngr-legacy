c
id
c
response
c
@searchresults
c
next
nexxt
next
help
?
c
usda_entries
c
usda_entries
c
usda_results
c
new_ingredient_info_passed?
c
value.blank?
value
c
newingredient_params.each do |key, value|
new_ingredient_params
new_ingredient_info_passed?
c
new_ingredient_info_passed?
new_ingredient_params
new_ingredient_info_passed?
c
param
c
param
c
param
c
param
c
param
c
new_ingredient_info_passed?
c
new_ingredient_info_passed?
c
new_ingredient_info_passed?
c
params[:newingredient]
params[:new_ingredient]
new_ingredient_info_passed?
c
params
new_ingredient_info_passed?
new_ingredient_info_passed
c
ingredient
ingredient.save
@recipe.save
ingredient
ingredient.save
ingredient.valid?
c
@recipe.calories
@recipe.ingredients
@recipe.ingredients.build(name: "Custom Ingredient", calories: 25, fat: 10, carbs: 12, protein: 3).save
@recipe.ingredients.build(name: "Custom Ingredient", calories: 25, fat: 10, carbs: 12, protein: 3).valid?
@recipe.ingredients.build(name: "Custom Ingredient", calories: 25, fat: 10, carbs: 12, protein: 3)
@recipe.ingredients
@recipe
c
new_ingredient_info_passed?
c
!theaparams[:name].blank?
theaparams[:name].blank?
theaparams[:name]
theaparams = newingredient_params
newingredient_params
new_ingredient_info_passed?
c
@recipe.protein
@recipe.carbs
@recipe.fat
c
@recipe.calories
@recipe.reload
@recipe.save
@recipe.remove_blank_ingredientsaa
@recipe.ingredients
@recipe
c
newingredient_params
c
thing[0]["type"]
thing[0]["name"]
thing[0]
thing = css_select ".recipe-form"
css_select ".recipe-form"
css_select ".recipe-form .ingredient"
ingredient_delete
c
@recipe.reload
@recipe.ingredients.delete_all
c
ingredient
recipe_ingredient_path(@recipe, ingredient)
c
recipe_ingredient_path(@recipe, ingredient)
c
recipe_ingredient_path(@recipe, ingredient)
c
recipe_ingredient_path(@recipe, ingredient)
c
ingredient
recipe_ingredient_path(@recipe, ingredient)
recipe_ingredient_path(@recipe)
recipe_ingredient_path
continue
c
@user.weightentries.size
@user.reload
@user.weightentries.size
@user.weightentries.first.destroy
@user.weighentries.first.destroy
@user.weightentries.size
@user.weightentries.build(value: 9999, day: 19850502).save
@user.weightentries.size
c
@user.preferences["height"]
@user.preferences[:height]
@user.preferences[:sex]
@user.preferences
c
@user.preferences
c
@user.reload
@user.save!
c
date.to_unit.convert_to(:date)
date.to_unit.convert_to('date')
date.to_unit.convert_to(:date)
date.to_unit.to_date
date.to_unit
date.to_date
Date.parse(date)
date.to_datetime
date
DateTime.parse(date)
c
record
attribute
value
c
@user.errors
@user.save
@user.email = "thisisn'tanemail"
c
height_cm = height_unit.convert_to('cm').scalar.to_i
height_cm = height_unit.convert_to('cm').round.scalar.to_i
height_cm = height_unit.convert_to('cm').round.scalar.to_r
height_cm = height_unit.convert_to('cm').round.scalar
height_cm = height_unit.convert_to('cm').round.to_f
height_cm = height_unit.convert_to('cm').round(1)
height_cm = height_unit.convert_to('cm').truncate
height_cm = height_unit.convert_to('cm').abs
height_cm = height_unit.convert_to('cm').round
height_cm
c
time_zone_options_for_select(nil, nil, ActiveSupport::TimeZone)
n
time_zone_options_for_select(nil, nil, ActiveSupport::TimeZone)
c
@user.save!
@user.save_options
c
@user.save_options
@user.save
c
n
pairs[0].squish == value.downcase.squish
value.downcase.squish
value.downcase
pairs[0].squish
value
pairs
n
pairs
n
pairs
n
pairs
n
pairs = allowed_value.split(":")
pairs
allowed_value
n
allowed_value
pairs
allowed_values
c
n
pairs
allowed_values
c
allowed_value
pairs
c
n
allowed_values
n
allowed_values
n
c
n
@user.save_options
@user.save!
@user.save
@user.option["select"]
@user.option
c
@user.options
c
@user.save_options!
@user.option["Test Option"]
@user.option
@user
Option.all
@user.save_options
@user.options
@user
@user.save!
c
key
c
@user.option_info
@user.options
@user.options.is_a?(Hash)
@user.save_options
@user.save
Option.all
c
Option.all
c
n
Option.all
c
Option.all
option.All
n
m
Option.all
n
Option.all
c
next
help
