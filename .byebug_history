c
new_entry.errors
new_entry.save
new_entry
n
day
n
fd_vals
fd_enabled
c
fd_enabled
c
current_user.preferences
fd_enabled
c
fd_enabled = true
current_user.preferences
fd_vals
fd_enabled
c
cc
n
fd_vals
fd_enabled
c
@user.preferences["auto_faturdays"]["mo"]
@user.preferences["auto_faturdays"].each
@user.preferences["auto_faturdays"]
c
@user.preferences
c
paras["faturday"].each do |day| puts day end
params["faturday"]
@user.preferences["faturday"]
c
params
c
params
c
params
c
messages
c
self.preferences
c
self.preferences
c
self.preferences
c
default_preferences
self.preferences
c
@user.preferences
c
n
@user.preferences = {}
@user.preferences
c
messages.load
messages
c
user_messages.size
user_messages.number
user_messages.count
user_messages
user_messages[0].message
c
user_messages[0].message
user_messages
c
type
c
exit
messages[0][:text]
messages
c
result["nutrients"][0]["measures"]
result["nutrients"][1]["measures"]
result
c
measure
c
ls
measure
c
measure
c
measure
c
measure
c
measure
c
recipe_params
@recipe.errors
@recipe.update(recipe_params)
c
flash
c
@recipe.errors
@recipe.update(recipe_params)
recipe_params
@recipe
c
@user
c
get :edit, id:@user.id
@user.id
@user.reset_digest
@user
c
next
@user
next
@user
c
food.deleted?
get :destroy, id: food.id
food = foods(:foodone)
food.deleted?
c
Food.count
get :destroy, id: food.id
food.id
Food.count
c
assigns(:totals)
assigns(:total)
c
assert assigns.key?(:foodentries)
c
assigns.key?(:foodentries)
assigns(:foodentries)
assigns
c
assigns(:prev_page)
assigns(:ppagge)
assigns(:searchresults)
assigns
c
assigns(@searchresults)[:base_url]
assigns(@searchresults)[:prev_page]
assigns(@searchresults)[:searchresults]
assigns(@searchresults)[searchresults]
assigns(@searchresults)
assigns(searchresults)
assigns(@searchresultsda)
assigns(@searchresults)
c
results[1]
results = css_select "h1"
results = css_select ".measurement-box"
results = css_select "main"
results = css_select "form"
results
c
results[0]["href"]
results[1]["href"]
results[2]["href"]
assert_select "form.edit_food_entry", count: 1
assert_select "form.edit_food_entry"
forms[0]['action']
c
self.amount
measurement
c
x
post :update, id: @foodentry.id, food_entry: {calories: 333}
post :update id: @foodentry.id, food_entry: {calories: 333}
@foodentry
c
id
c
response
c
@searchresults
c
next
nexxt
next
help
?
c
usda_entries
c
usda_entries
c
usda_results
c
new_ingredient_info_passed?
c
value.blank?
value
c
newingredient_params.each do |key, value|
new_ingredient_params
new_ingredient_info_passed?
c
new_ingredient_info_passed?
new_ingredient_params
new_ingredient_info_passed?
c
param
c
param
c
param
c
param
c
param
c
new_ingredient_info_passed?
c
new_ingredient_info_passed?
c
new_ingredient_info_passed?
c
params[:newingredient]
params[:new_ingredient]
new_ingredient_info_passed?
c
params
new_ingredient_info_passed?
new_ingredient_info_passed
c
ingredient
ingredient.save
@recipe.save
ingredient
ingredient.save
ingredient.valid?
c
@recipe.calories
@recipe.ingredients
@recipe.ingredients.build(name: "Custom Ingredient", calories: 25, fat: 10, carbs: 12, protein: 3).save
@recipe.ingredients.build(name: "Custom Ingredient", calories: 25, fat: 10, carbs: 12, protein: 3).valid?
@recipe.ingredients.build(name: "Custom Ingredient", calories: 25, fat: 10, carbs: 12, protein: 3)
@recipe.ingredients
@recipe
c
new_ingredient_info_passed?
c
!theaparams[:name].blank?
theaparams[:name].blank?
theaparams[:name]
theaparams = newingredient_params
newingredient_params
new_ingredient_info_passed?
c
@recipe.protein
@recipe.carbs
@recipe.fat
c
@recipe.calories
@recipe.reload
