c
nd
c
within("nav") { click_link_or_button "Log in" }
within("nav") { fill_in "Password", :with => "123test123password" }
within("nav") { fill_in "Email", :with => @user.email }
fill_in "Email", :with => @user.email
page
current_path
visit "/getstarted/register"
visit https://w8mngr.com/getstarted/register
click_link "Get started"
click_link_or_button "Get started"
n
click_link_or_button "Get started"
current_path
click_link_or_button "Log in"
fill_in("Email", { with: "test@gl.com" } )
fill_in ("Email", {with: "test@gl.com"})
fill_in "Email", with: "test@gl.com"
fill_in "Email", :with => "clown@fart.com"
c
fill_in "Email", :with => @user.email
n
fill_in "Email", :with => @user.email
n
assert_selector "body.nojs"
page.has_css?(".alert.error")
assert_selector ".alert.error"
c
assert_selector ".alert.error"
assert_select ".alert.error"
n
assert_select ".alert.error"
page.has_css?(".alert")
page.has_css?(".alert.error")
page.has_css?("alert.error")
page.has_css?("body.nojs")
click_link_or_button "Log in"
fill_in "Password", :with => "123test123password"
fill_in "Email", :with => @user.email
@user
2/user
current_path
current_page
page.has_css?("body.nojs")
page
follow_redirect!
current_path
have_css
expect(page).to
expect(page)
expect
expectr
page.expect
page
Capybara::DSL::expect
Capybara::expect
expect
self.expect
this.expect
has_current_path
have_current_path(current_path)
current_path
click_link_or_button "Log in"
fill_in "Password", with: "123test123password"
fill_in "Password", :with => "123test123password"
@user.emailfill_in "Password", :with => "123test123
fill_in "Email", :with => @user.email
c
dashboard_path[0]
dashboard_path[1]
c
dashboard_path
current_path
c
assert_equal current_path, foodlog_path
assert_equals
expect(current_path).to
c
current_path
c
visit foodlog_path
current_path
visit getting_started_path
visit "/"
visit /
current_path
within("#main") { click_button "Log in" }
within("#main") do
current_path
c
click_button "Log in"
current_path
c
fill_in "Email", with: @user.email
click_link_or_button "Log in"
click_button "Log in"
current_path
c
current_path
expect
current_host
c
click_button "Log in"
current_path
response
c
response
c
get edit_password_reset_path(id: user.reset_token, email:'this.is.obviously.not.the.right@email.address.com')
user.reset_token
user.create_reset_digest
user.create_reset_token
user.reset_password
get edit_password_reset_path(id: user.reset_digest, email:'this.is.obviously.not.the.right@email.address.com')
user.reset_digest
user
user.reset_token
get edit_password_reset_path(id: user.reset_token, email:'this.is.obviously.not.the.right@email.address.com')
get edit_password_reset_path(id: user.reset_token) email:'this.is.obviously.not.the.right@email.address.com'
get edit_password_reset_path(id: user.reset_token), email:'this.is.obviously.not.the.right@email.address.com'
get edit_password_reset_path id: user.reset_token, email:'this.is.obviously.not.the.right@email.address.com'
get edit_password_reset_path, id: user.reset_token, email:'this.is.obviously.not.the.right@email.address.com'
get edit_password_reset_path(user.reset_token), email:'this.is.obviously.not.the.right@email.address.com'
get edit_password_reset_path(id: user.reset_token), email:'this.is.obviously.not.the.right@email.address.com'
get edit_password_reset_path(id: user.reset_token, email:'this.is.obviously.not.the.right@email.address.com')
get edit_password_reset_path(id:user.reset_token, email:'this.is.obviously.not.the.right@email.address.com')
get edit_password_reset_path(user.reset_token, email:'this.is.obviously.not.the.right@email.address.com')
user
c
n
params
c
@user
n
params
c
@user.reload
@user.reset_password
@user
@user = User.find_by(email: params[:password_reset][:email].downcase)
current_user
params
c
enqueued_jobs
assert_template 'password_resets/edit'
follow_redirect!
assert_response :redirect
assert_redirect
assert_redirecte
exit
@user.reset_token
@user.update_attribute(:reset_sent_at, 3.hours.ago)
@user.reset_token
@user = assigns(:user)
@user.reset_token
@user.create_reset_digest
@user
@user.reset_token
c
exit
c
Rails.configuration.x.host
c
Rails.cache
c
averages
c
data_obj.time_data("calories")
c
a.average_of
a = FoodEntryData.new()
FoodEntryData::average_of
FoodEntryData.average_of
c
averages["calories"] = data_obj.time_data("calories")[1][1].to_i
averages["calories"] = data_obj.time_data("calories")
exit
c
[k, nil] if total_days < 1
total_days
puts v
v
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
data
exit
c
self.day_ts
day_ts
c
day_ts
c
day
day_ts
c
day_ts
day
c
exit
c
a = FoodEntry.last
exit
Date.strptime(a.day.to_s,"%Y%m%d").to_time
Date.strptime(a.day.to_s,"%Y%m%d")
Date.parse(Date.strptime(a.day.to_s,"%Y%m%d"))
Date.strptime(a.day.to_s,"%Y%m%d")
a = FoodEntry.last
FoodEntry.last.day
FoodEntry.last.day_ts
FoodEntry.last.description
exit
FoodEntry.last.description
FoodEntry.last.day_ts
FoodEntry.last.day
exit
FoodEntry.last.day
FoodEntry.last.day_ts
FoodEntry.last.description
days[0][1].to_i
days[0][1]
days[1][1]
days
last
c
averages['weights'].to_i
averages['weights']
averages
c
averages
c
averages
c
averages
c
calories.to_i
calories
c
calories
c
data
