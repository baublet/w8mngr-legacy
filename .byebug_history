c
Unit.new((steps.to_s.to_i * 74) + "cm").convert_to("miles")
steps.to_s.to_i * 74
steps
self.user.preferences["height"]
stride
c
self.reps = steps.to_s.to_i
steps.to_s
steps.to_i
steps.data
steps
c
parsed_work
c
parsed_work.nil?
n
parsed_work
work
c
@new_activityentry
c
work_g
c
numeric?
c
work.to_unit.convert_to("g").scalar.to_i
work_g
work
c
intensity.to_f
intensity
c
ChronicDuration.parse(params[:work])
ChroncDuration.parse(params[:work])
params
c
like_string
activities
c
bit
git
n
c
groups
c
groups[:biceps]
groups[:biceps.to_s]
groups
c
key
name
c
i
key
val
exit
name
key
c
@routine
c
calories_burned.round(2)
calories_burned
calories
exit
wmkg * 9.81 * 0.2 / 1000
wmkg * 9.81 * 0.2
multiplier.to_i
multiplier
wmkg.to_i
wmkg
exit
calories_burned * 0.2 / 1000
calories_burned * 0.2
calories_burned * 0.1
calories_burned = wmkg * 9.81 * 0.8
wmkg
(user_weight / work).to_i
user_weight / work
user_weight
(work/1000).to_i
work/1000
work
c
calories_burned
exit
a.try(:[], 2).try(:day)
a.try(:[], 0).try(:day)
a[0].try(:day)
a[0]
a.day
a.try(:day)
a.try(day)
a
exit
a.key
a
c
activities_completed
c
activities_completed
c
activity_ids
exit
self.activities
activities
c
params[:activities].each do |key, value| puts key + '  ' + value end
params[:activities]
params
c
params
c
params[:activities]
params[:activities].is_a?(Array)
c
params[:activities]
c
activities
c
activity_id
c
defined? dashboard_info["tdee"]
dashboard_info["tdee"].set?
dashboard_info["tdee"].defined?
dashboard_info["tdee"].exists?
dashboard_info["tdee"]
dashboard_info
c
@response.body
@response
c
exit
puts disp
disp
puts "what" if disp == false
puts "what" if disp == true
disp
c
finish
help
finish
n
up
help
?
p
c
n
disp
n
disp
