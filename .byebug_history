c
Rails.cache
c
averages
c
data_obj.time_data("calories")
c
a.average_of
a = FoodEntryData.new()
FoodEntryData::average_of
FoodEntryData.average_of
c
averages["calories"] = data_obj.time_data("calories")[1][1].to_i
averages["calories"] = data_obj.time_data("calories")
exit
c
[k, nil] if total_days < 1
total_days
puts v
v
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
total_days
c
data
exit
c
self.day_ts
day_ts
c
day_ts
c
day
day_ts
c
day_ts
day
c
exit
c
a = FoodEntry.last
exit
Date.strptime(a.day.to_s,"%Y%m%d").to_time
Date.strptime(a.day.to_s,"%Y%m%d")
Date.parse(Date.strptime(a.day.to_s,"%Y%m%d"))
Date.strptime(a.day.to_s,"%Y%m%d")
a = FoodEntry.last
FoodEntry.last.day
FoodEntry.last.day_ts
FoodEntry.last.description
exit
FoodEntry.last.description
FoodEntry.last.day_ts
FoodEntry.last.day
exit
FoodEntry.last.day
FoodEntry.last.day_ts
FoodEntry.last.description
days[0][1].to_i
days[0][1]
days[1][1]
days
last
c
averages['weights'].to_i
averages['weights']
averages
c
averages
c
averages
c
averages
c
calories.to_i
calories
c
calories
c
data
c
data[:week_fat]
data[:week_averages]
data[:week-averages]
data.week_averages
data.week-aerages
data
exit
entries.sum("fat")
entries
exit
data
v
k
v
good_days = v.select { |e| e[1] > 0 }
c
total_days
good_days
c
good_days
c
data
c
good_days = v.select { |e| e[1] > 0 }
good_days = v.select { |e| e[2] > 0 }
c
data
c
exit
data.map {
weeks = days.group_by_week() { |d| d[0] }
c
exit
      weeks = average weeks
weeks = days.group_by_week() { |d| d[0] }
exit
days.group_by_week() { |d| d[0] }
days
c
filter(days)
days = days.to_a.select {|v| true if v[1] != 0}
days
c
days.to_a.select { |v| true if v[1] != 0 }
days.select { |v| true if v[1] != 0 }
days.to_a
days."Sun, 08 May 2016 00:00:00 UTC +00:00"
days[0]
days
c
c.
@week_averages
c
@week_calories[6]
@week_calories
@week_calories[4]
c
@week_calories[4]
@week_calories[5]
@week_calories[6]
@week_calories
@week_Calories
JSON.pretty_generate(@week_calories)
JSON.pretty_generate(@week_calories.to_json)
@week_calories.to_json
@week_calories.to_yaml
@week_calories.to_yml
c
@week_calories
@week_Calories
week_calories
exit
c
column
self.valid?
valid?
return [k, 0]
puts v.inspect
puts v.size
c
puts v.inspect
puts v.size
c
puts v[0].size
puts v.inspect
c
puts v.inspect
v.nil?
puts v
c
puts v
c
puts v
c
puts v
v
exit
puts v[0][1].to_iexit
puts v[0][1].to_i
puts v[0][1][0]
puts v[0][1]
puts v[1]
puts v.inspect
puts v
v
exit
next
cc
c
puts k
puts v
c
puts k
puts v.inspect
puts v
v
c
puts JSON.pretty_generate(weeks)
c
puts JSON.pretty_generate(weeks)
JSON.pretty_generate(weeks)
pretty_print weeks
pp weeks
c
weeks
c
days
c
days = days.compact
days.compact
days
c
weights[key]
weights[ley]
weight[key]
key
week
c
weights
calories
c
calories
weights
exit
calories
weights
exit
week[2]
week[3]
week
exit
c
column
self.valid?
valid?
return [k, 0]
puts v.inspect
puts v.size
c
puts v.inspect
puts v.size
c
puts v[0].size
